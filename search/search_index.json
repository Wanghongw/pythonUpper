{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python\u5b9e\u8df5\u4e0e\u8fdb\u9636\u6307\u5357 \u7f16\u8005\u6309 \u672c\u6587\u6863\u65e8\u5728\u5206\u4eab\u7b14\u8005\u5728\u4f7f\u7528python\u5b8c\u6210\u5de5\u4f5c\u7684\u8fc7\u7a0b\u4e2d\u603b\u7ed3\u7684\u4e00\u4e9b\u597d\u7528\u7684\u65b9\u6cd5\uff0c\u5e0c\u671b\u8fd9\u91cc\u7684\u65b9\u6cd5\u53ef\u4ee5\u5e2e\u52a9\u540c\u5b66\u4eec\u987a\u5229\u9ad8\u6548\u7684\u5b8c\u6210\u81ea\u5df1\u7684\u4e1a\u52a1\u4ee3\u7801\uff0c\u540c\u65f6\u672c\u6587\u6863\u5bf9\u81ea\u5df1\u6765\u8bf4\u4e5f\u7b97\u662f\u505a\u4e00\u4e0b\u8bb0\u5f55\uff0c\u65b9\u4fbf\u4ee5\u540e\u7528\u5230\u7684\u65f6\u5019\u67e5\u9605\u3002 \u672c\u6587\u6863\u4f7f\u7528\u4e86 mkdocs \u8fdb\u884c\u64b0\u5199\u5e76\u6258\u7ba1\u5230github\u4e0a\u514d\u8d39\u90e8\u7f72\u4e0a\u7ebf\uff0c\u5982\u679c\u4f60\u4e5f\u6709\u5174\u8da3\u81ea\u5df1\u5199\u4e00\u4e2a\u6587\u6863\u53ef\u4ee5\u53c2\u8003\u7b14\u8005\u7684\u8fd9\u7bc7\u535a\u5ba2\uff1a \u4f7f\u7528mkdocs\u64b0\u5199\u6280\u672f\u6587\u6863\u5e76\u514d\u8d39\u90e8\u7f72\u4e0a\u7ebf \u6700\u540e\uff0c\u5982\u679c\u60a8\u89c9\u5f97\u672c\u6307\u5357\u5bf9\u60a8\u6709\u5e2e\u52a9\uff0c\u53ef\u4ee5\u6253\u8d4f\u652f\u6301\u4f5c\u8005\uff0c\u611f\u8c22\u60a8\u7684\u652f\u6301\uff01","title":"Home"},{"location":"#python","text":"","title":"Python\u5b9e\u8df5\u4e0e\u8fdb\u9636\u6307\u5357"},{"location":"#_1","text":"\u672c\u6587\u6863\u65e8\u5728\u5206\u4eab\u7b14\u8005\u5728\u4f7f\u7528python\u5b8c\u6210\u5de5\u4f5c\u7684\u8fc7\u7a0b\u4e2d\u603b\u7ed3\u7684\u4e00\u4e9b\u597d\u7528\u7684\u65b9\u6cd5\uff0c\u5e0c\u671b\u8fd9\u91cc\u7684\u65b9\u6cd5\u53ef\u4ee5\u5e2e\u52a9\u540c\u5b66\u4eec\u987a\u5229\u9ad8\u6548\u7684\u5b8c\u6210\u81ea\u5df1\u7684\u4e1a\u52a1\u4ee3\u7801\uff0c\u540c\u65f6\u672c\u6587\u6863\u5bf9\u81ea\u5df1\u6765\u8bf4\u4e5f\u7b97\u662f\u505a\u4e00\u4e0b\u8bb0\u5f55\uff0c\u65b9\u4fbf\u4ee5\u540e\u7528\u5230\u7684\u65f6\u5019\u67e5\u9605\u3002 \u672c\u6587\u6863\u4f7f\u7528\u4e86 mkdocs \u8fdb\u884c\u64b0\u5199\u5e76\u6258\u7ba1\u5230github\u4e0a\u514d\u8d39\u90e8\u7f72\u4e0a\u7ebf\uff0c\u5982\u679c\u4f60\u4e5f\u6709\u5174\u8da3\u81ea\u5df1\u5199\u4e00\u4e2a\u6587\u6863\u53ef\u4ee5\u53c2\u8003\u7b14\u8005\u7684\u8fd9\u7bc7\u535a\u5ba2\uff1a \u4f7f\u7528mkdocs\u64b0\u5199\u6280\u672f\u6587\u6863\u5e76\u514d\u8d39\u90e8\u7f72\u4e0a\u7ebf \u6700\u540e\uff0c\u5982\u679c\u60a8\u89c9\u5f97\u672c\u6307\u5357\u5bf9\u60a8\u6709\u5e2e\u52a9\uff0c\u53ef\u4ee5\u6253\u8d4f\u652f\u6301\u4f5c\u8005\uff0c\u611f\u8c22\u60a8\u7684\u652f\u6301\uff01","title":"\u7f16\u8005\u6309"},{"location":"\u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668/","text":"\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0e\u8fed\u4ee3\u5668\u5bf9\u8c61 \u5728\u5199\u722c\u866b\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u5c06\u722c\u53d6\u51fa\u6765\u7684\u5185\u5bb9\u5148\u5c01\u88c5\u5230\u4e00\u4e2a\u5bf9\u8c61\u4e2d\uff0c\u7136\u540e\u518d\u7528for\u8bed\u53e5\u5faa\u73af\u8fed\u4ee3\u51fa\u6765\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5c06\u6293\u53d6\u51fa\u6765\u7684\u6570\u636e\u4e00\u6b21\u6027\u7684\u663e\u793a\uff0c\u56e0\u4e3a\u8fd9\u6837\u65e2\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\u800c\u4e14\u7531\u4e8e\u7f51\u7edcIO\u5904\u7406\u8d77\u6765\u8fd8\u6162\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230\u8fed\u4ee3\u5668\u4e86\u3002 from collections import Iterable, Iterator import requests class WeatherIterator(Iterator): def __init__(self, caties): self.caties = caties self.index = 0 def __next__(self): if self.index == len(self.caties): raise StopIteration city = self.caties[self.index] self.index += 1 return self.get_weather(city) def get_weather(self, city): url = 'http://wthrcdn.etouch.cn/weather_mini?city=' + city r = requests.get(url) data = r.json()['data']['forecast'][0] return city, data['high'], data['low'] class WeatherIterable(Iterable): def __init__(self, cities): self.cities = cities def __iter__(self): return WeatherIterator(self.cities) def show(w): for x in w: print(x) w = WeatherIterable(['\u5317\u4eac', '\u4e0a\u6d77', '\u5e7f\u5dde'] * 10) show(w) \u4f7f\u7528\u751f\u6210\u5668\u51fd\u6570\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61 \u4e00\u4e2a\u6a21\u62df\u6848\u4f8b\uff1a\u5b9e\u73b0\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u7c7b\uff0c\u4f7f\u5b83\u80fd\u8fed\u4ee3\u51fa\u7ed9\u5b9a\u8303\u56f4\u5185\u6240\u6709\u7684\u8d28\u6570\u3002 from collections import Iterable class PrimeNumbers(Iterable): def __init__(self, a, b): self.a = a self.b = b def __iter__(self): for k in range(self.a, self.b + 1): if self.is_prime(k): yield k def is_prime(self, k): return False if k < 2 else all(map(lambda x: k % x, range(2, k))) pn = PrimeNumbers(1, 30) for n in pn: print(n) \u81ea\u5df1\u5b9e\u73b0\u53cd\u5411\u8fed\u4ee3 \u529f\u80fd\u7c7b\u4f3c\u4e8e\u5c06 range \u7684 \u6b65\u8fdb\u503c \u8bbe\u7f6e\u4e3a\u6b63\u6570\u65f6\u4e3a\u6b63\u5411\u8fed\u4ee3\uff0c\u8bbe\u7f6e\u4e3a\u8d1f\u6570\u65f6\u4e3a\u53cd\u5411\u8fed\u4ee3\u3002 from decimal import Decimal class FloatRange: def __init__(self, a, b, step): self.a = Decimal(str(a)) self.b = Decimal(str(b)) self.step = Decimal(str(step)) def __iter__(self): t = self.a while t <= self.b: yield float(t) t += self.step def __reversed__(self): t = self.b while t >= self.a: yield float(t) t -= self.step fr = FloatRange(3.0, 4.0, 0.2) for x in fr: print(x) print('-' * 20) for x in reversed(fr): print(x) \"\"\" 4.0 -------------------- 4.0 3.8 3.6 3.4 3.2 3.0 \"\"\"","title":"01 \u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668"},{"location":"\u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668/#_1","text":"\u5728\u5199\u722c\u866b\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u5c06\u722c\u53d6\u51fa\u6765\u7684\u5185\u5bb9\u5148\u5c01\u88c5\u5230\u4e00\u4e2a\u5bf9\u8c61\u4e2d\uff0c\u7136\u540e\u518d\u7528for\u8bed\u53e5\u5faa\u73af\u8fed\u4ee3\u51fa\u6765\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5c06\u6293\u53d6\u51fa\u6765\u7684\u6570\u636e\u4e00\u6b21\u6027\u7684\u663e\u793a\uff0c\u56e0\u4e3a\u8fd9\u6837\u65e2\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\u800c\u4e14\u7531\u4e8e\u7f51\u7edcIO\u5904\u7406\u8d77\u6765\u8fd8\u6162\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230\u8fed\u4ee3\u5668\u4e86\u3002 from collections import Iterable, Iterator import requests class WeatherIterator(Iterator): def __init__(self, caties): self.caties = caties self.index = 0 def __next__(self): if self.index == len(self.caties): raise StopIteration city = self.caties[self.index] self.index += 1 return self.get_weather(city) def get_weather(self, city): url = 'http://wthrcdn.etouch.cn/weather_mini?city=' + city r = requests.get(url) data = r.json()['data']['forecast'][0] return city, data['high'], data['low'] class WeatherIterable(Iterable): def __init__(self, cities): self.cities = cities def __iter__(self): return WeatherIterator(self.cities) def show(w): for x in w: print(x) w = WeatherIterable(['\u5317\u4eac', '\u4e0a\u6d77', '\u5e7f\u5dde'] * 10) show(w)","title":"\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0e\u8fed\u4ee3\u5668\u5bf9\u8c61"},{"location":"\u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668/#_2","text":"\u4e00\u4e2a\u6a21\u62df\u6848\u4f8b\uff1a\u5b9e\u73b0\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u7684\u7c7b\uff0c\u4f7f\u5b83\u80fd\u8fed\u4ee3\u51fa\u7ed9\u5b9a\u8303\u56f4\u5185\u6240\u6709\u7684\u8d28\u6570\u3002 from collections import Iterable class PrimeNumbers(Iterable): def __init__(self, a, b): self.a = a self.b = b def __iter__(self): for k in range(self.a, self.b + 1): if self.is_prime(k): yield k def is_prime(self, k): return False if k < 2 else all(map(lambda x: k % x, range(2, k))) pn = PrimeNumbers(1, 30) for n in pn: print(n)","title":"\u4f7f\u7528\u751f\u6210\u5668\u51fd\u6570\u5b9e\u73b0\u53ef\u8fed\u4ee3\u5bf9\u8c61"},{"location":"\u8fed\u4ee3\u5668\u4e0e\u751f\u6210\u5668/#_3","text":"\u529f\u80fd\u7c7b\u4f3c\u4e8e\u5c06 range \u7684 \u6b65\u8fdb\u503c \u8bbe\u7f6e\u4e3a\u6b63\u6570\u65f6\u4e3a\u6b63\u5411\u8fed\u4ee3\uff0c\u8bbe\u7f6e\u4e3a\u8d1f\u6570\u65f6\u4e3a\u53cd\u5411\u8fed\u4ee3\u3002 from decimal import Decimal class FloatRange: def __init__(self, a, b, step): self.a = Decimal(str(a)) self.b = Decimal(str(b)) self.step = Decimal(str(step)) def __iter__(self): t = self.a while t <= self.b: yield float(t) t += self.step def __reversed__(self): t = self.b while t >= self.a: yield float(t) t -= self.step fr = FloatRange(3.0, 4.0, 0.2) for x in fr: print(x) print('-' * 20) for x in reversed(fr): print(x) \"\"\" 4.0 -------------------- 4.0 3.8 3.6 3.4 3.2 3.0 \"\"\"","title":"\u81ea\u5df1\u5b9e\u73b0\u53cd\u5411\u8fed\u4ee3"}]}